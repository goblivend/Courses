<?xml version="1.0"?>
<robot name="my_robot" xmlns:xacro="http://ros.org/wiki/xacro">
    <!-- Define robot constants -->
    <xacro:property name="base_width" value="0.31"/>
    <xacro:property name="base_length" value="0.42"/>
    <xacro:property name="base_height" value="0.18"/>

    <xacro:property name="wheel_radius" value="0.10"/>
    <xacro:property name="wheel_width" value="0.04"/>
    <xacro:property name="wheel_ygap" value="0.025"/>
    <xacro:property name="wheel_zoff" value="0.05"/>
    <xacro:property name="wheel_xoff" value="0.12"/>

    <xacro:property name="caster_xoff" value="0.14"/>

    <xacro:property name="base_mass" value="15"/>
    <xacro:property name="wheel_mass" value="0.5"/>

    <xacro:property name="wheel_radius_sq" value="${wheel_radius*wheel_radius}"/>
    <xacro:property name="wheel_width_sq" value="${wheel_width*wheel_width}"/>

    <xacro:property name="base_length_sq" value="${base_length*base_length}"/>
    <xacro:property name="base_width_sq" value="${base_width*base_width}"/>
    <xacro:property name="base_height_sq" value="${base_height*base_height}"/>

    <!-- Robot Base -->
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
            <material name="Cyan">
                <color rgba="0 1.0 1.0 1.0"/>
            </material>
        </visual>
        <collision>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="15"/>
            <inertia ixx="${1/12*base_mass*(base_height_sq+base_width_sq)}" ixy="0" ixz="0" iyx="0" iyy="${1/12*base_mass*(base_height_sq+base_length_sq)}" iyz="0" izx="0" izy="0" izz="${1/12*base_mass*(base_width_sq+base_length_sq)}"/>
        </inertial>
    </link>

        <!-- Wheels -->
    <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                        <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <material name="Gray">
                    <color rgba="0.5 0.5 0.5 1.0"/>
                </material>
            </visual>
            <collision>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </collision>
            <inertial>
                <mass value="${wheel_mass}"/>
                <inertia ixx="${1/12*wheel_mass*(3*wheel_radius_sq+wheel_width_sq)}" ixy="0" ixz="0" iyx="0" iyy="${1/12*wheel_mass*(3*wheel_radius_sq+wheel_width_sq)}" iyz="0" izx="0" izy="0" izz="${1/12*wheel_mass*wheel_radius_sq}"/>
            </inertial>
        </link>

        <joint name="${prefix}_joint" type="continuous">
            <parent link="base_link"/>
            <child link="${prefix}_link"/>
            <origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
            <axis xyz="0 1 0"/>
        </joint>
    </xacro:macro>

    <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
    <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

    <!-- Caster Wheel -->
    <link name="front_caster">
        <visual>
            <geometry>
                <sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
            </geometry>
            <material name="Cyan">
                <color rgba="0 1.0 1.0 1.0"/>
            </material>
        </visual>
        <collision>
            <geometry>
                <sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
            </geometry>
        </collision>
        <inertial>
            <mass value="${wheel_mass}"/>
            <inertia ixx="${2/5*wheel_mass*wheel_radius_sq}" ixy="0" ixz="0" iyx="0" iyy="${2/5*wheel_mass*wheel_radius_sq}" iyz="0" izx="0" izy="0" izz="${2/5*wheel_mass*wheel_radius_sq}"/>
        </inertial>
    </link>

    <joint name="caster_joint" type="floating">
        <parent link="base_link"/>
        <child link="front_caster"/>
        <origin xyz="${caster_xoff} 0.0 ${-(base_height/2)}" rpy="0 0 0"/>
        <!-- <axis xyz="0 1 0"/> -->
    </joint>

    <gazebo>
        <plugin name='diff_drive' filename='libgazebo_ros_diff_drive.so'>
            <ros>
                <namespace>/demo</namespace>
            </ros>

            <!-- wheels -->
            <left_joint>drivewhl_l_joint</left_joint>
            <right_joint>drivewhl_r_joint</right_joint>

            <!-- kinematics -->
            <wheel_separation>0.4</wheel_separation>
            <wheel_diameter>0.2</wheel_diameter>

            <!-- limits -->
            <max_wheel_torque>20</max_wheel_torque>
            <max_wheel_acceleration>1.0</max_wheel_acceleration>

            <!-- output -->
            <publish_odom>true</publish_odom>
            <publish_odom_tf>false</publish_odom_tf>
            <publish_wheel_tf>true</publish_wheel_tf>

            <odometry_frame>odom</odometry_frame>
            <robot_base_frame>base_link</robot_base_frame>
        </plugin>
    </gazebo>

</robot>
